import pandas as pd
import numpy as np
import joblib
import logging
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.multioutput import MultiOutputRegressor
from sklearn.metrics import mean_squared_error, classification_report, accuracy_score
from sklearn.model_selection import StratifiedKFold

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def log(message):
    logging.info(message)

# Load dataset
log("Loading dataset...")
df = pd.read_csv('Dataset/food_vulnerability.csv')

# Preprocess data
log("Preprocessing data...")
df['impact'] = df['impact'].str.split(', ').apply(lambda x: x[0])  # Simplify for classification

# Drop the 'product_name' column as it's not needed
df = df.drop(columns=['product_name'])

# Convert categorical features to dummy variables
df = pd.get_dummies(df, columns=['category', 'ingredients', 'allergen_warning'], drop_first=True)

# Feature and target variables
X = df.drop(['health_benefits', 'vulnerability', 'impact'], axis=1)
y_bv = df[['health_benefits', 'vulnerability']]
y_impact = df['impact']

# Train-test split
log("Splitting data into train and test sets...")
X_train, X_test, y_train_bv, y_test_bv, y_train_impact, y_test_impact = train_test_split(
    X, y_bv, y_impact, test_size=0.2, random_state=42
)

# Define parameter grid for RandomForestRegressor
regressor_param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10]
}

# Define parameter grid for RandomForestClassifier
classifier_param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10]
}

# Define models
log("Defining models...")
base_regressor = RandomForestRegressor()
regressor = MultiOutputRegressor(base_regressor)
classifier = RandomForestClassifier(class_weight='balanced')

# Setup GridSearchCV for RandomForestRegressor
grid_search_regressor = GridSearchCV(estimator=base_regressor, param_grid=regressor_param_grid, cv=5, n_jobs=-1, scoring='neg_mean_squared_error')

# Setup GridSearchCV for RandomForestClassifier
stratified_kfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
grid_search_classifier = GridSearchCV(estimator=classifier, param_grid=classifier_param_grid, cv=stratified_kfold, n_jobs=-1, scoring='accuracy')

# Cross-validation for RandomForestRegressor
log("Performing cross-validation for regression...")
cv_scores_regressor = cross_val_score(grid_search_regressor, X, y_bv, cv=5, scoring='neg_mean_squared_error')
log(f"Cross-validated MSE for regression: {-cv_scores_regressor.mean()}")

# Cross-validation for RandomForestClassifier
log("Performing cross-validation for classification...")
cv_scores_classifier = cross_val_score(grid_search_classifier, X, y_impact, cv=5, scoring='accuracy')
log(f"Cross-validated accuracy for classification: {cv_scores_classifier.mean()}")

# Fit GridSearchCV for RandomForestRegressor
log("Training regression models with GridSearchCV...")
grid_search_regressor.fit(X_train, y_train_bv)

# Fit GridSearchCV for RandomForestClassifier
log("Training classifier models with GridSearchCV...")
grid_search_classifier.fit(X_train, y_train_impact)

# Best parameters
log(f"Best parameters for regression: {grid_search_regressor.best_params_}")
log(f"Best parameters for classification: {grid_search_classifier.best_params_}")

# Make predictions
log("Making predictions on the test set...")
y_pred_bv = grid_search_regressor.predict(X_test)
y_pred_impact = grid_search_classifier.best_estimator_.predict(X_test)

# Evaluate regression model
log("Evaluating regression model...")
mse_health_benefits = mean_squared_error(y_test_bv['health_benefits'], y_pred_bv[:, 0])
mse_vulnerability = mean_squared_error(y_test_bv['vulnerability'], y_pred_bv[:, 1])
mae_health_benefits = np.mean(np.abs(y_test_bv['health_benefits'] - y_pred_bv[:, 0]))
mae_vulnerability = np.mean(np.abs(y_test_bv['vulnerability'] - y_pred_bv[:, 1]))

log(f"Regression MSE for health benefits: {mse_health_benefits}")
log(f"Regression MSE for vulnerability: {mse_vulnerability}")
log(f"Regression MAE for health benefits: {mae_health_benefits}")
log(f"Regression MAE for vulnerability: {mae_vulnerability}")

# Evaluate classification model
log("Evaluating classification model...")
impact_classifier = grid_search_classifier.best_estimator_
impact_accuracy = accuracy_score(y_test_impact, y_pred_impact)
impact_report = classification_report(y_test_impact, y_pred_impact, target_names=impact_classifier.classes_)

log(f"Impact Classification Accuracy: {impact_accuracy}")
log("Impact Classification Report:")
log(impact_report)

# Save the best models
log("Saving models...")
joblib.dump(grid_search_regressor.best_estimator_, 'Models/model_1_regressor_best.pkl')
joblib.dump(grid_search_classifier.best_estimator_, 'Models/model_1_classifier_best.pkl')

log("Model training and saving completed.")
